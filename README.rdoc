= Aleksey Magusevs Dot Files

These are config files to set up a system the way I like it.


== Installation

  git clone git://github.com/lexmag/dotfiles ~/.dotfiles
  cd ~/.dotfiles
  rake install


== Environment

I am running on Mac OS X, but it will likely work on Linux as well with 
minor fiddling. I primarily use zsh. To switch to zsh, you can do so with 
the following command.

  chsh -s /bin/zsh


== Features

I normally place all of my coding projects in ~/Code, so this directory 
can easily be accessed (and tab completed) with the "c" command.

  c dotfi<tab>

There is also an "h" command which behaves similar, but acts on the 
home path.

  h Down<tab>

Also there is an "m" command which is shortcut for "mate". Just "m" without operand behaves same as "mate .".

Tab completion is also added to rake and cap commands.

  rake db:mi<tab>
  cap de<tab>

To speed things up, the results are cached in local .rake_tasks~ and 
.cap_tasks~. It is smart enough to expire the cache automatically in 
most cases, but you can simply remove the files to flush the cache.

There are a few key bindings set. Many of these require option to be
set as the meta key. Option-left/right arrow will move cursor by word, 
and control-left/right will move to beginning and end of line. 
A new tab will open with the current directory under
Mac OS X Terminal.

If you're using git, you'll notice the current branch name shows up in
the prompt while in a git repository.

If you're using Rails, you'll find some handy aliases (below). You can 
also use show_log and hide_log in "rails console" to show the log inline.
  
  rss       # rails server
  rsc       # rails console
  rsg       # rails generate
  rsl     	# tail -f log/development.log
  rst      	# touch tmp/restart.txt
  rdb  		# rake db:migrate db:test:clone
  rrs		# rake routes
  
See the other aliases in ~/.zsh/aliases

If there are some shell configuration settings which you want secure or 
specific to one system, place it into a ~/.localrc file. This will be 
loaded automatically if it exists.

There are several features enabled in Ruby's IRB including history and 
completion. Many convenience methods are added as well such as "ri"
which can be used to get inline documentation in IRB. See irbrc and
railsrc files for details.

I usualy use PRY instead IRB.
If you run "pry" from the application’s directory you’ll have access to our application’s models just as we would in the standard Rails console. Also you’ll have access to console helpers, for example "reload!". See pryrc file for details.
